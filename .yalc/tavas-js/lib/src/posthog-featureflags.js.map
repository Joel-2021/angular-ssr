{"version":3,"file":"posthog-featureflags.js","sourceRoot":"","sources":["../../src/posthog-featureflags.ts"],"names":[],"mappings":"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","sourcesContent":["import { _base64Encode, _extend } from './utils'\nimport { Tavas } from './posthog-core'\nimport { DecideResponse, FeatureFlagsCallback, RequestCallback } from './types'\nimport { PostHogPersistence } from './posthog-persistence'\n\nexport const parseFeatureFlagDecideResponse = (response: Partial<DecideResponse>, persistence: PostHogPersistence) => {\n    const flags = response['featureFlags']\n    if (flags) {\n        // using the v1 api\n        if (Array.isArray(flags)) {\n            const $enabled_feature_flags: Record<string, boolean> = {}\n            if (flags) {\n                for (let i = 0; i < flags.length; i++) {\n                    $enabled_feature_flags[flags[i]] = true\n                }\n            }\n            persistence &&\n                persistence.register({\n                    $active_feature_flags: flags,\n                    $enabled_feature_flags,\n                })\n        } else {\n            // using the v2 api\n            persistence &&\n                persistence.register({\n                    $active_feature_flags: Object.keys(flags || {}),\n                    $enabled_feature_flags: flags || {},\n                })\n        }\n    } else {\n        if (persistence) {\n            persistence.unregister('$active_feature_flags')\n            persistence.unregister('$enabled_feature_flags')\n        }\n    }\n}\n\nexport class PostHogFeatureFlags {\n    instance: Tavas\n    _override_warning: boolean\n    flagCallReported: Record<string, boolean>\n    featureFlagEventHandlers: FeatureFlagsCallback[]\n    reloadFeatureFlagsQueued: boolean\n    reloadFeatureFlagsInAction: boolean\n    $anon_distinct_id: string | undefined\n\n    constructor(instance: Tavas) {\n        this.instance = instance\n        this._override_warning = false\n        this.flagCallReported = {}\n        this.featureFlagEventHandlers = []\n\n        this.reloadFeatureFlagsQueued = false\n        this.reloadFeatureFlagsInAction = false\n    }\n\n    getFlags(): string[] {\n        return Object.keys(this.getFlagVariants())\n    }\n\n    getFlagVariants(): Record<string, string | boolean> {\n        const enabledFlags = this.instance.get_property('$enabled_feature_flags')\n        const overriddenFlags = this.instance.get_property('$override_feature_flags')\n        if (!overriddenFlags) {\n            return enabledFlags || {}\n        }\n\n        const finalFlags = _extend({}, enabledFlags)\n        const overriddenKeys = Object.keys(overriddenFlags)\n        for (let i = 0; i < overriddenKeys.length; i++) {\n            if (overriddenFlags[overriddenKeys[i]] === false) {\n                delete finalFlags[overriddenKeys[i]]\n            } else {\n                finalFlags[overriddenKeys[i]] = overriddenFlags[overriddenKeys[i]]\n            }\n        }\n        if (!this._override_warning) {\n            console.warn('[PostHog] Overriding feature flags!', {\n                enabledFlags,\n                overriddenFlags,\n                finalFlags,\n            })\n            this._override_warning = true\n        }\n        return finalFlags\n    }\n\n    /**\n     * Reloads feature flags asynchronously.\n     *\n     * Constraints:\n     *\n     * 1. Avoid parallel requests\n     * 2. Delay a few milliseconds after each reloadFeatureFlags call to batch subsequent changes together\n     * 3. Don't call this during initial load (as /decide will be called instead), see posthog-core.js\n     */\n    reloadFeatureFlags(): void {\n        if (!this.reloadFeatureFlagsQueued) {\n            this.reloadFeatureFlagsQueued = true\n            this._startReloadTimer()\n        }\n    }\n\n    setAnonymousDistinctId(anon_distinct_id: string): void {\n        this.$anon_distinct_id = anon_distinct_id\n    }\n\n    setReloadingPaused(isPaused: boolean): void {\n        this.reloadFeatureFlagsInAction = isPaused\n    }\n\n    resetRequestQueue(): void {\n        this.reloadFeatureFlagsQueued = false\n    }\n\n    _startReloadTimer(): void {\n        if (this.reloadFeatureFlagsQueued && !this.reloadFeatureFlagsInAction) {\n            setTimeout(() => {\n                if (!this.reloadFeatureFlagsInAction && this.reloadFeatureFlagsQueued) {\n                    this.reloadFeatureFlagsQueued = false\n                    this._reloadFeatureFlagsRequest()\n                }\n            }, 5)\n        }\n    }\n\n    _reloadFeatureFlagsRequest(): void {\n        this.setReloadingPaused(true)\n        const token = this.instance.get_config('token')\n        const json_data = JSON.stringify({\n            token: token,\n            distinct_id: this.instance.get_distinct_id(),\n            groups: this.instance.getGroups(),\n            $anon_distinct_id: this.$anon_distinct_id,\n        })\n\n        const encoded_data = _base64Encode(json_data)\n        this.instance._send_request(\n            this.instance.get_config('api_host') + '/decide/?v=2',\n            { data: encoded_data },\n            { method: 'POST' },\n            this.instance._prepare_callback((response) => {\n                // reset anon_distinct_id after at least a single request with it\n                // makes it through\n                this.$anon_distinct_id = undefined\n\n                this.receivedFeatureFlags(response as DecideResponse)\n\n                // :TRICKY: Reload - start another request if queued!\n                this.setReloadingPaused(false)\n                this._startReloadTimer()\n            }) as RequestCallback\n        )\n    }\n\n    /*\n     * Get feature flag's value for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.getFeatureFlag('my-flag') === 'some-variant') { // do something }\n     *\n     * @param {Object|String} key Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    getFeatureFlag(key: string, options: { send_event?: boolean } = {}): boolean | string {\n        if (!this.getFlags()) {\n            console.warn('getFeatureFlag for key \"' + key + '\" failed. Feature flags didn\\'t load in time.')\n            return false\n        }\n        const flagValue = this.getFlagVariants()[key]\n        if ((options.send_event || !('send_event' in options)) && !this.flagCallReported[key]) {\n            this.flagCallReported[key] = true\n            this.instance.capture('$feature_flag_called', { $feature_flag: key, $feature_flag_response: flagValue })\n        }\n        return flagValue\n    }\n\n    /*\n     * See if feature flag is enabled for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.isFeatureEnabled('beta-feature')) { // do something }\n     *\n     * @param {Object|String} key Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    isFeatureEnabled(key: string, options: { send_event?: boolean } = {}): boolean {\n        if (!this.getFlags()) {\n            console.warn('isFeatureEnabled for key \"' + key + '\" failed. Feature flags didn\\'t load in time.')\n            return false\n        }\n        return !!this.getFeatureFlag(key, options)\n    }\n\n    addFeatureFlagsHandler(handler: FeatureFlagsCallback): void {\n        this.featureFlagEventHandlers.push(handler)\n    }\n\n    receivedFeatureFlags(response: Partial<DecideResponse>): void {\n        this.instance.decideEndpointWasHit = true\n        parseFeatureFlagDecideResponse(response, this.instance.persistence)\n        const flags = this.getFlags()\n        const variants = this.getFlagVariants()\n        this.featureFlagEventHandlers.forEach((handler) => handler(flags, variants))\n    }\n\n    /*\n     * Override feature flags for debugging.\n     *\n     * ### Usage:\n     *\n     *     - posthog.feature_flags.override(false)\n     *     - posthog.feature_flags.override(['beta-feature'])\n     *     - posthog.feature_flags.override({'beta-feature': 'variant', 'other-feature': True})\n     *\n     * @param {Object|Array|String} flags Flags to override with.\n     */\n    override(flags: boolean | string[] | Record<string, string | boolean>): void {\n        this._override_warning = false\n\n        if (flags === false) {\n            this.instance.persistence.unregister('$override_feature_flags')\n        } else if (Array.isArray(flags)) {\n            const flagsObj: Record<string, string | boolean> = {}\n            for (let i = 0; i < flags.length; i++) {\n                flagsObj[flags[i]] = true\n            }\n            this.instance.persistence.register({ $override_feature_flags: flagsObj })\n        } else {\n            this.instance.persistence.register({ $override_feature_flags: flags })\n        }\n    }\n    /*\n     * Register an event listener that runs when feature flags become available or when they change.\n     * If there are flags, the listener is called immediately in addition to being called on future changes.\n     *\n     * ### Usage:\n     *\n     *     posthog.onFeatureFlags(function(featureFlags) { // do something })\n     *\n     * @param {Function} [callback] The callback function will be called once the feature flags are ready or when they are updated.\n     *                              It'll return a list of feature flags enabled for the user.\n     */\n    onFeatureFlags(callback: FeatureFlagsCallback): void {\n        this.addFeatureFlagsHandler(callback)\n        if (this.instance.decideEndpointWasHit) {\n            const flags = this.getFlags()\n            const flagVariants = this.getFlagVariants()\n            callback(flags, flagVariants)\n        }\n    }\n}\n"]}